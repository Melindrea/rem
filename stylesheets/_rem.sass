// Base font size, measured in pixels, if not already defined (eg. in Compass' vertical rhythm module).
// The value should be the same as the font-size value for the html element.

$base-font-size: 16px !default

// Print the given value in rem units with a fallback declaration in pixels.
// Accepts $values in px (or rem for convenience).
//
// $property - The css property name to set in rems
// $values - The value (or space-separated list of values) for $property. If a list is passed, 
//           each value must be of the same unit or a unitless value. Allowed values lists include:
//           1px solid #ccc
//           1px auto 3px 0
//           etc.

=rem($property, $values)
  // Find out what unit was passed. Stop as soon as we find a value
  // with a unit.
  $unit: ""
  @if type-of($values) == "list"
    $i: 1
    $exit: false
    // If the value is a number with unit, set $unit and exit
    @while $i <= length($values) and not $exit
      $value: nth($values, $i)
      @if type-of($value) == "number" and not unitless($value)
        $unit: unit($value)
        $exit: true
      // Increment iterator before repeating
      $i: $i + 1
  @else
    $unit: unit($values)
  // Use the conversion mixin for the appropriate input unit.
  @if $unit == "rem"
    +rem-to-px($property, $values)
  @else
    +px-to-rem($property, $values)

// Print rem values with pixel fallback from *pixel* values.
// Intended as a `private` mixin. Use the `public` @mixin rem instead.
// 
// $property - The css property name
// $px-values - The value or values (space-separated list) for $property, in pixels

=px-to-rem($property, $px-values)
  // Number of pixels in 1rem (default: 16px/rem)
  // When converting to rems, we must divide by this ratio.
  $px-per-rem: $base-font-size / 1rem
  // Print the pixel fallback declaration first so we can override it in capable browsers.
  #{$property}: $px-values
  // If there is only one value, print the declaration with the value converted to rems.
  @if type-of($px-values) == "number"
    #{$property}: $px-values / $px-per-rem
  @else
    // Otherwise, we've got a list and we'll need to convert each value in turn.
    // Create an empty list that we can dump values into.
    $rem-values: ()
    @each $value in $px-values
      // If the value is zero, a string or a color, leave it be.
      @if $value == 0 or type-of($value) == "string" or type-of($value) == "color"
        $rem-values: append($rem-values, $value)
      @else
        $rem-values: append($rem-values, $value / $px-per-rem)
    // Print the property and its list of converted values.
    #{$property}: $rem-values

// Print rem values with pixel fallback from *rem* values.
// Intended as a `private` mixin. Use `public` @mixin rem instead.
// 
// $property - The css property name
// $px-values - The value or values (space-separated list) for $property, in pixels

=rem-to-px($property, $rem-values)
  // Number of rems in 1px (default: 0.0625rem/px)
  // When converting to pixels, we must divide by this ratio.
  $rem-per-px: 1rem / $base-font-size
  // If there is only one value, print the declaration with the value converted to px.
  @if type-of($rem-values) == "number"
    #{$property}: $rem-values / $rem-per-px
  @else
    // Otherwise, we've got a list and we'll need to convert each value in turn.
    // Create an empty list that we can dump values into.
    $px-values: ()
    @each $value in $rem-values
      // If the value is zero, a string or a color, leave it be.
      @if $value == 0 or type-of($value) == "string" or type-of($value) == "color"
        $px-values: append($px-values, $value)
      @else
        $px-values: append($px-values, $value / $rem-per-px)
    // Print the property and its list of converted values.
    #{$property}: $px-values
  // Put the rem values in place at the end, to override pixels in capable browsers.
  #{$property}: $rem-values
